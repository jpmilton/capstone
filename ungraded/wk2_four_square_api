import requests
import pandas as pd
import numpy as np
import random

from geopy.geocoders import Nominatim

# Libraries for displaying images
from IPython.display import Image
from IPython.core.display import HTML

from pandas.io.json import json_normalize

import folium

print("Folium installed!")
print("Libraries installed!")

CLIENT_ID = "QVIXRJUFGBAPDX3SYI03ZE5NKRXHDN0RTDZPKPA2JRKJ23ZR"
CLIENT_SECRET = "XLLUIOXL42E5XG2X5PWOOM4POWBIG1OWI5SQJIKASKYWODM"  # what
VERSION = "20180604"
LIMIT = 30

address = '102 North End Ave, New York, NY'
geolocator = Nominatim(user_agent="foursquare_agent")
location = geolocator.geocode(address)
latitude = location.latitude
longitude = location.longitude
print(latitude, longitude)

search_query = 'Italian'
radius = 500
url = 'https://api.foursquare.com/v2/venues/search?client_id={}&client_secret={}&ll={},{}&v={}&query={}&radius={}&limit={}'.format(
    CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION, search_query, radius, LIMIT)

results = requests.get(url).json()

venues = results['response']['venues']
df = json_normalize(venues)

# keep only columns that include venue bane and anything to do with the location
filtered_columns = ['name', 'categories'] + [col for col in df.columns if col.startswith('location.')] + ['id']
dff = df.loc[:, filtered_columns]


def get_category_type(row):
    try:
        categories_list = row['categories']
    except:
        categories_list = row['venues.categories']

    if len(categories_list) == 0:
        return None
    else:
        return categories_list[0]['name']


# filter the category for each row
dff['categories'] = dff.apply(get_category_type, axis=1)

# clean column names by keeping only the last term

dff.columns = [column.split('.')[-1] for column in dff.columns]
print(dff.name)

# visualize
venues_map = folium.Map(location=[latitude,longitude],zoom_start=13)

folium.CircleMarker(
    [latitude,longitude],
    radius = 10,
    popup='Ecco',
    fill=True,
    color='red',
    fill_color='red',
    fill_opacity=0.6,
).add_to(venues_map)

for lat, lng, label in zip(dff.lat, dff.lng, dff.categories):
    folium.CircleMarker(
        [lat, lng],
        radius=10,
        popup=label,
        fill=True,
        color='blue',
        fill_color='blue',
        fill_opacity=0.6,
    ).add_to(venues_map)

#display(venues_map)

# Explore a venue
venue_id = '4fa862b3e4b0ebff2f749f06'
#{'id': '4fa862b3e4b0ebff2f749f06', 'name': "Harry's Italian Pizza Bar", 'location': {'address': '225 Murray St', 'lat': 40.71521779064671, 'lng': -74.01473940209351, 'labeledLatLngs': [{'label': 'display', 'lat': 40.71521779064671, 'lng': -74.01473940209351}], 'distance': 58, 'postalCode': '10282', 'cc': 'US', 'city': 'New York', 'state': 'NY', 'country': 'United States', 'formattedAddress': ['225 Murray St', 'New York, NY 10282', 'United States']}, 'categories': [{'id': '4bf58dd8d48988d1ca941735', 'name': 'Pizza Place', 'pluralName': 'Pizza Places', 'shortName': 'Pizza', 'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/pizza_', 'suffix': '.png'}, 'primary': True}], 'delivery': {'id': '294544', 'url': 'https://www.seamless.com/menu/harrys-italian-pizza-bar-225-murray-st-new-york/294544?affiliate=1131&utm_source=foursquare-affiliate-network&utm_medium=affiliate&utm_campaign=1131&utm_content=294544', 'provider': {'name': 'seamless', 'icon': {'prefix': 'https://fastly.4sqi....

url = 'https://api.foursquare.com/v2/venues/{}?client_id={}&client_secret={}&v={}'.format( venue_id, CLIENT_ID, CLIENT_SECRET, VERSION )
result = requests.get(url).json()

#print(result['response']['venue'].keys())
# Get venue's overall rating
try:
    print(result['response']['venue']['rating'])
except:
    print("Venue has not been rated yet.")


# Try the next Italian
#{'id': '4f3232e219836c91c7bfde94', 'name': 'Conca Cucina Italian Restaurant', 'location': {'address': '63 W Broadway', 'lat': 40.714484000000006, 'lng': -74.00980600000001, 'labeledLatLngs': [{'label': 'display', 'lat': 40.714484000000006, 'lng': -74.00980600000001}], 'distance': 469, 'postalCode': '10007', 'cc': 'US', 'city': 'New York', 'state': 'NY', 'country': 'United States', 'formattedAddress': ['63 W Broadway', 'New York, NY 10007', 'United States']}, 'categories': [{'id': '4d4b7105d754a06374d81259', 'name': 'Food', 'pluralName': 'Food', 'shortName': 'Food', 'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/default_', 'suffix': '.png'}, 'primary': True}], 'referralId': 'v-1572849837', 'hasPerk': False}
venue_id = '4f3232e219836c91c7bfde94'
#{'id': '4fa862b3e4b0ebff2f749f06', 'name': "Harry's Italian Pizza Bar", 'location': {'address': '225 Murray St', 'lat': 40.71521779064671, 'lng': -74.01473940209351, 'labeledLatLngs': [{'label': 'display', 'lat': 40.71521779064671, 'lng': -74.01473940209351}], 'distance': 58, 'postalCode': '10282', 'cc': 'US', 'city': 'New York', 'state': 'NY', 'country': 'United States', 'formattedAddress': ['225 Murray St', 'New York, NY 10282', 'United States']}, 'categories': [{'id': '4bf58dd8d48988d1ca941735', 'name': 'Pizza Place', 'pluralName': 'Pizza Places', 'shortName': 'Pizza', 'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/pizza_', 'suffix': '.png'}, 'primary': True}], 'delivery': {'id': '294544', 'url': 'https://www.seamless.com/menu/harrys-italian-pizza-bar-225-murray-st-new-york/294544?affiliate=1131&utm_source=foursquare-affiliate-network&utm_medium=affiliate&utm_campaign=1131&utm_content=294544', 'provider': {'name': 'seamless', 'icon': {'prefix': 'https://fastly.4sqi....

url = 'https://api.foursquare.com/v2/venues/{}?client_id={}&client_secret={}&v={}'.format( venue_id, CLIENT_ID, CLIENT_SECRET, VERSION )
result = requests.get(url).json()
try:
    print(result['response']['venue']['rating'])
except:
    print("Venue has not been rated yet.")

# No rating, so check the third
#{'id': '3fd66200f964a520f4e41ee3', 'name': 'Ecco', 'location': {'address': '124 Chambers St', 'crossStreet': 'btwn Church St & W Broadway', 'lat': 40.71533713859952, 'lng': -74.00884766217825, 'labeledLatLngs': [{'label': 'display', 'lat': 40.71533713859952, 'lng': -74.00884766217825}], 'distance': 549, 'postalCode': '10007', 'cc': 'US', 'city': 'New York', 'state': 'NY', 'country': 'United States', 'formattedAddress': ['124 Chambers St (btwn Church St & W Broadway)', 'New York, NY 10007', 'United States']}, 'categories': [{'id': '4bf58dd8d48988d110941735', 'name': 'Italian Restaurant', 'pluralName': 'Italian Restaurants', 'shortName': 'Italian', 'icon': {'prefix': 'https://ss3.4sqi.net/img/categories_v2/food/italian_', 'suffix': '.png'}, 'primary': True}], 'referralId': 'v-1572849935', 'hasPerk': False}
venue_id = '3fd66200f964a520f4e41ee3'
url = 'https://api.foursquare.com/v2/venues/{}?client_id={}&client_secret={}&v={}'.format( venue_id, CLIENT_ID, CLIENT_SECRET, VERSION )
result = requests.get(url).json()
try:
    print(result['response']['venue']['rating'])
except:
    print("Venue has not been rated yet.")

# Explore this further
print(result['response']['venue']['tips']['count'])
#Get the tips
limit = 15
url = 'https://api.foursquare.com/v2/venues/{}/tips?client_id={}&client_secret={}&v={}&limit={}'.format(
    venue_id, CLIENT_ID, CLIENT_SECRET, VERSION, limit)

results = requests.get(url).json()

tips = results['response']['tips']['items']
tip = tips[0]
print(tip.keys())
pd.set_option('display.max_colwidth',-1)
tips_df = json_normalize(tips)
filtered_columns = ['text','agreeCount','disagreeCount','id','user.firstName','user.lastName','user.gender','user.id']
tips_filtered = tips_df.loc[:,filtered_columns]
print(tips_filtered)

# Now search for a user
user_id = '484542633'
url = 'https://api.foursquare.com/v2/users/{}?client_id={}&client_secret={}&v={}'.format(
    user_id, CLIENT_ID, CLIENT_SECRET, VERSION)

results = requests.get(url).json()
user_data = results['response']['user']

print(user_data['tips'])

# Get User's tips
url = 'https://api.foursquare.com/v2/users/{}/tips?client_id={}&client_secret={}&v={}&limit={}'.format(
    user_id, CLIENT_ID, CLIENT_SECRET, VERSION, limit)
results = requests.get(url).json()
tips = results['response']['tips']['items']
tips_df = json_normalize(tips)

filtered_columns = ['text','agreeCount','disagreeCount','id']
tips_filtered = tips_df.loc[:,filtered_columns]
print(tips_filtered.head())

# Get the venue for the tip with the greatest number of agree counts
tip_id = '5ab5575d73fe2516ad8f363b'
url = 'http://api.foursquare.com/v2/tips/{}?client_id={}&client_secret={}&v={}'.format(
    tip_id, CLIENT_ID, CLIENT_SECRET, VERSION)
#print(url)
#results = requests.get(url).json()

#print(result['response']['tip']['venue']['name'])
#print(result['response']['tip']['venue']['location'])

user_friends = json_normalize(user_data['friends']['groups'][0]['items'])
print(user_friends
      )

#Image(url='https://igx.4sqi.net/img/user/300x300/484542633_mK2Yum7T_7Tn9fWpndidJsmw2Hof_6T5vJBKCHPLMK5OL-U5ZiJGj51iwBstcpDLYa3Zvhvis.jpg')

# Explore location API
# https://api.foursquare.com/v2/venues/explore?client_id=CLIENT_ID&client_secret=CLIENT_SECRET&ll=LATITUDE,LONGITUDE&v=VERSION&limit=LIMIT

latitude = 40.715337
longitude = -74.008848
url = 'https://api.foursquare.com/v2/venues/explore?client_id={}&client_secret={}&ll={},{}&v={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION, radius, LIMIT)
results = requests.get(url).json()
print('There are {} around Ecco restaurant.'.format(len(results['response']['groups'][0]['items'])))

items = results['response']['groups'][0]['items']
print(items[0])

dataframe = json_normalize(items) # flatten JSON

# filter columns
filtered_columns = ['venue.name', 'venue.categories'] + [col for col in dataframe.columns if col.startswith('venue.location.')] + ['venue.id']
dataframe_filtered = dataframe.loc[:, filtered_columns]

# filter the category for each row
dataframe_filtered['venue.categories'] = dataframe_filtered.apply(get_category_type, axis=1)

# clean columns
dataframe_filtered.columns = [col.split('.')[-1] for col in dataframe_filtered.columns]

print(dataframe_filtered.head(10))

venues_map = folium.Map(location=[latitude, longitude], zoom_start=15) # generate map centred around Ecco


# add Ecco as a red circle mark
folium.features.CircleMarker(
    [latitude, longitude],
    radius=10,
    popup='Ecco',
    fill=True,
    color='red',
    fill_color='red',
    fill_opacity=0.6
    ).add_to(venues_map)


# add popular spots to the map as blue circle markers
for lat, lng, label in zip(dataframe_filtered.lat, dataframe_filtered.lng, dataframe_filtered.categories):
    folium.features.CircleMarker(
        [lat, lng],
        radius=5,
        popup=label,
        fill=True,
        color='blue',
        fill_color='blue',
        fill_opacity=0.6
        ).add_to(venues_map)

# display map
venues_map


# Explore Trending Venues
#https: // api.foursquare.com / v2 / venues / trending?client_id = CLIENT_ID & client_secret = CLIENT_SECRET & ll = LATITUDE, LONGITUDE & v = VERSION

# define URL
url = 'https://api.foursquare.com/v2/venues/trending?client_id={}&client_secret={}&ll={},{}&v={}'.format(CLIENT_ID, CLIENT_SECRET, latitude, longitude, VERSION)

# send GET request and get trending venues
results = requests.get(url).json()
print(results)

# Check if any of the venues are trending at this time
if len(results['response']['venues']) == 0:
    trending_venues_df = 'No trending venues are available at the moment!'

else:
    trending_venues = results['response']['venues']
    trending_venues_df = json_normalize(trending_venues)

    # filter columns
    columns_filtered = ['name', 'categories'] + ['location.distance', 'location.city', 'location.postalCode',
                                                 'location.state', 'location.country', 'location.lat', 'location.lng']
    trending_venues_df = trending_venues_df.loc[:, columns_filtered]

    # filter the category for each row
    trending_venues_df['categories'] = trending_venues_df.apply(get_category_type, axis=1)


print(trending_venues_df)

if len(results['response']['venues']) == 0:
    venues_map = 'Cannot generate visual as no trending venues are available at the moment!'

else:
    venues_map = folium.Map(location=[latitude, longitude], zoom_start=15) # generate map centred around Ecco


    # add Ecco as a red circle mark
    folium.features.CircleMarker(
        [latitude, longitude],
        radius=10,
        popup='Ecco',
        fill=True,
        color='red',
        fill_color='red',
        fill_opacity=0.6
    ).add_to(venues_map)


    # add the trending venues as blue circle markers
    for lat, lng, label in zip(trending_venues_df['location.lat'], trending_venues_df['location.lng'], trending_venues_df['name']):
        folium.features.CircleMarker(
            [lat, lng],
            radius=5,
            poup=label,
            fill=True,
            color='blue',
            fill_color='blue',
            fill_opacity=0.6
        ).add_to(venues_map)
